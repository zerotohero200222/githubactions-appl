name: githubactions actions
on: workflow_dispatch
env:
    AWS_REGION: us-east-1
    ECR_REPOSITORY: githubactions-appl
    EKS_CLUSTER: infra-eks

jobs:
    Testing:
        runs-on: ubuntu-latest
        steps:
            - name: Code checkout
              uses: actions/checkout@v4

            - name: Maven test
              run: mvn test

            - name: Checkstyle
              run: mvn checkstyle:checkstyle

            # Setup java 11 to be default(sonar-scanner requirements)
            - name: Set Java 17
              uses: actions/setup-java@v3
              with:
                distribution: 'temurin'
                java-version: '17'

            - name: Setup SonarQube
              uses: warchant/setup-sonar-scanner@v7

            # Run sonar-scanner
            - name: SonarQube Scan
              run: sonar-scanner
                -Dsonar.host.url=${{ secrets.SONAR_URL }}
                -Dsonar.login=${{ secrets.SONAR_TOKEN }}
                -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
                -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
                -Dsonar.sources=src/
                -Dsonar.junit.reportsPath=target/surefire-reports/ 
                -Dsonar.jacoco.reportsPath=target/jacoco.exec 
                -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

                    # Check the Quality Gate status.
            #- name: SonarQube Quality Gate check
            #  id: sonarqube-quality-gate-check
            #  uses: sonarsource/sonarqube-quality-gate-action@master
            # Force to fail step after specific time.
            #  timeout-minutes: 5
            #  env:
            #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            #    SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL 

    Build_and_publish:
        needs: Testing
        runs-on: ubuntu-latest
        steps:
            - name: Code checkout
              uses: actions/checkout@v4

            - name: Build & Upload image to ECR
              uses: appleboy/docker-ecr-action@master
              with:
                access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                registry: ${{ secrets.REGISTRY }}
                repo: ${{ env.ECR_REPOSITORY}}
                region: ${{ env.AWS_REGION }}
                tags: 3,latest,${{ github.run_number }}
                daemon_off: false
                dockerfile: ./Dockerfile
                context: ./

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: '${{ secrets.REGISTRY }}/githubactions-appl'
                format: 'sarif'
                output: 'trivy-results.sarif'
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
    
            - name: Upload Trivy scan results to GitHub Security tab
              uses: github/codeql-action/upload-sarif@v2
              with:
                sarif_file: 'trivy-results.sarif'
                category: 'image'

    DeployToEKS:
        needs: Build_and_publish
        runs-on: ubuntu-latest
        steps:
            - name: Code checkout
              uses: actions/checkout@v4

            - name: configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}

            - name: Get kubeconfig file
              run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

            - name: Print kubeconfig file
              run: cat ~/.kube/config
              
            - name: Login to ECR
              run: kubectl create secret docker-registry regcred --docker-server=$${{ secrets.REGISTRY }} --docker-username=AWS --docker-password=$(aws ecr get-login-password)

            - name: Deploy Helm
              uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION}}
                cluster-name: ${{ env.EKS_CLUSTER }}
                # config-files: .github/values/dev.yaml
                chart-path: helm/githubactions-charts
                namespace: default
                values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
                name: githubactions-stack
